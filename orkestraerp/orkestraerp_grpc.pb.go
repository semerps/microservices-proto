// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: orkestraerp/orkestraerp.proto

package orkestraerp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrkestraErpClient is the client API for OrkestraErp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrkestraErpClient interface {
	GetPage(ctx context.Context, in *GetPageParams, opts ...grpc.CallOption) (*ResponsePage, error)
}

type orkestraErpClient struct {
	cc grpc.ClientConnInterface
}

func NewOrkestraErpClient(cc grpc.ClientConnInterface) OrkestraErpClient {
	return &orkestraErpClient{cc}
}

func (c *orkestraErpClient) GetPage(ctx context.Context, in *GetPageParams, opts ...grpc.CallOption) (*ResponsePage, error) {
	out := new(ResponsePage)
	err := c.cc.Invoke(ctx, "/orkestraerp.OrkestraErp/GetPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrkestraErpServer is the server API for OrkestraErp service.
// All implementations must embed UnimplementedOrkestraErpServer
// for forward compatibility
type OrkestraErpServer interface {
	GetPage(context.Context, *GetPageParams) (*ResponsePage, error)
	mustEmbedUnimplementedOrkestraErpServer()
}

// UnimplementedOrkestraErpServer must be embedded to have forward compatible implementations.
type UnimplementedOrkestraErpServer struct {
}

func (UnimplementedOrkestraErpServer) GetPage(context.Context, *GetPageParams) (*ResponsePage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (UnimplementedOrkestraErpServer) mustEmbedUnimplementedOrkestraErpServer() {}

// UnsafeOrkestraErpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrkestraErpServer will
// result in compilation errors.
type UnsafeOrkestraErpServer interface {
	mustEmbedUnimplementedOrkestraErpServer()
}

func RegisterOrkestraErpServer(s grpc.ServiceRegistrar, srv OrkestraErpServer) {
	s.RegisterService(&OrkestraErp_ServiceDesc, srv)
}

func _OrkestraErp_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrkestraErpServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orkestraerp.OrkestraErp/GetPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrkestraErpServer).GetPage(ctx, req.(*GetPageParams))
	}
	return interceptor(ctx, in, info, handler)
}

// OrkestraErp_ServiceDesc is the grpc.ServiceDesc for OrkestraErp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrkestraErp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orkestraerp.OrkestraErp",
	HandlerType: (*OrkestraErpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPage",
			Handler:    _OrkestraErp_GetPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orkestraerp/orkestraerp.proto",
}
